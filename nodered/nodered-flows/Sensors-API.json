[
    {
        "id": "c4e5c2ecfe2a7d7c",
        "type": "subflow",
        "name": "Get Room",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 200,
                "wires": [
                    {
                        "id": "2f90ac2e6758dcb9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 200,
                "wires": [
                    {
                        "id": "aa6109e4a5c0be32",
                        "port": 0
                    },
                    {
                        "id": "5e515066c83f5d87",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2f90ac2e6758dcb9",
        "type": "function",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Create query",
        "func": "msg.queryParameters = { \n    sensor_id: msg.payload\n}\n\nmsg.query = \"SELECT * FROM sensors WHERE sensor_id = $sensor_id \"\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            [
                "42501e96d518dccc"
            ]
        ]
    },
    {
        "id": "aa6109e4a5c0be32",
        "type": "function",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Get object from array",
        "func": "msg.topic = \"room_value\"\nmsg.payload = msg.payload[0];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b50f2f9f75d72f28",
        "type": "switch",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Empty check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "aa6109e4a5c0be32"
            ],
            [
                "5e515066c83f5d87"
            ]
        ]
    },
    {
        "id": "5e515066c83f5d87",
        "type": "function",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Create empty object",
        "func": "msg.topic = \"Room-value\"\nmsg.payload = {\n    sensor_id: msg.sensor_id,\n    room: \"Not specified\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "42501e96d518dccc",
        "type": "postgresql",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 470,
        "y": 200,
        "wires": [
            [
                "b50f2f9f75d72f28"
            ]
        ]
    },
    {
        "id": "6f295efb41de0f64",
        "type": "tab",
        "label": "Sensors API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f3de19ae627756a8",
        "type": "group",
        "z": "6f295efb41de0f64",
        "name": "Boiler sensor",
        "style": {
            "label": true
        },
        "nodes": [
            "8c3e16ee22c93023",
            "20b49a20a02f99d1",
            "613f7b6db7a9d2df",
            "50746b1e44afbbb9",
            "c62166d70d8a7cd2",
            "27a506d0afda7f4d",
            "0d50e7b83a890505",
            "391fe0dd47fdfea7",
            "44e1c880e5af92ab",
            "3a6ebff3b3ba3aff",
            "d1a778494bc55ec6"
        ],
        "x": 54,
        "y": 459,
        "w": 1512,
        "h": 202
    },
    {
        "id": "46ae6eaea7b98a6c",
        "type": "group",
        "z": "6f295efb41de0f64",
        "name": "Outdoors pocasidoma",
        "style": {
            "label": true
        },
        "nodes": [
            "84a1512053cd5f10",
            "e9bc1d8d864cd01a",
            "7f209b6dc426abd4",
            "81bb3521bf046ed9",
            "cd4fd42d5ff75102",
            "703bd536e69dc5da",
            "597446dc812fa59d",
            "875cd03620bc228e"
        ],
        "x": 54,
        "y": 999,
        "w": 1452,
        "h": 142
    },
    {
        "id": "91fb6c2e6d03d44f",
        "type": "group",
        "z": "6f295efb41de0f64",
        "name": "Outdoors sensor",
        "style": {
            "label": true
        },
        "nodes": [
            "0533be7df303af06",
            "259bf77f1b32d532",
            "0961c32405383a51",
            "1e4fd941529df255",
            "b1769eb6983f968e",
            "fb9a65ca01590cc7",
            "6d06af34243d112a",
            "3cc01fcea2cef0bb",
            "7c2978126c2f444c",
            "994eb5b6fbb61d47",
            "3d35b0b6290ff4c5"
        ],
        "x": 54,
        "y": 719,
        "w": 1512,
        "h": 222
    },
    {
        "id": "c2e3c67e8b32942e",
        "type": "group",
        "z": "6f295efb41de0f64",
        "name": "Indoors sensors",
        "style": {
            "label": true
        },
        "nodes": [
            "07d6b639cb962ff6",
            "94204058074f2134",
            "d2d9175cc521443a",
            "d84deab32d24b48f",
            "c979f22f6171cbe6",
            "b61e240e36ac6d7e",
            "213a26f8f0e4420a",
            "50c8b9014b1bf57c",
            "a9c50bae42883c2e",
            "a5224bf7b48d60d3",
            "11b12c8f2978b551",
            "78936ed5134682cd",
            "8e4db32e74c6260d",
            "d051ac3741bf5474",
            "f551cc72b4d1a714",
            "6460cd7cf5bdd4e9",
            "dcfb038379c4c512",
            "495f4728cc474793",
            "1caa23e3de09d65d",
            "0aeaf07d09f146f9"
        ],
        "x": 54,
        "y": 59,
        "w": 1592,
        "h": 362
    },
    {
        "id": "8c3e16ee22c93023",
        "type": "http in",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Get values from boiler sensor",
        "url": "/postBoiler",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 560,
        "wires": [
            [
                "613f7b6db7a9d2df",
                "50746b1e44afbbb9"
            ]
        ]
    },
    {
        "id": "20b49a20a02f99d1",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "HTTP Response on Error",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 620,
        "wires": []
    },
    {
        "id": "613f7b6db7a9d2df",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Data from boiler sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 620,
        "wires": []
    },
    {
        "id": "50746b1e44afbbb9",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "JSON test",
        "func": "\n// Post Request does not containe JSON data, flow stops\nif(typeof(msg.payload) != \"object\" ){\n    msg.statusCode = 415;\n    msg.payload = \"Data are not in JSON format\";\n}\n// Empty JSON, flow stops\nelse if(JSON.stringify(msg.payload) == '{}'){\n    msg.statusCode = 422;\n    msg.payload = \"JSON is empty\";\n}\n\n// JSON does not contain all data, flow stops\nelse if(!(\"sensor_id\" in msg.payload && \"board_type\" in msg.payload && \"sensor_type\" in msg.payload && \"tmp_in\" in msg.payload && \"tmp_out\" in msg.payload && \"dhw_tmp\" in msg.payload && \"dhw_coil_tmp\" in msg.payload )){\n    msg.statusCode = 422;\n    msg.payload = \"JSON doesn't have right format.\\r\\nJSON should have fields: sensor_id, board_type, sensor_type, tmp_in, tmp_out, dhw_tmp, dhw_coil_tmp.\";\n}\n\n// Everything is fine and we can proceed with rest of the code flow\nelse{\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 560,
        "wires": [
            [
                "c62166d70d8a7cd2",
                "27a506d0afda7f4d"
            ]
        ]
    },
    {
        "id": "c62166d70d8a7cd2",
        "type": "switch",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "HTTP response switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 560,
        "wires": [
            [
                "0d50e7b83a890505",
                "3a6ebff3b3ba3aff"
            ],
            [
                "20b49a20a02f99d1"
            ]
        ]
    },
    {
        "id": "27a506d0afda7f4d",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Print boiler JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 500,
        "wires": []
    },
    {
        "id": "0d50e7b83a890505",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "HTTP Response OK",
        "statusCode": "",
        "headers": {},
        "x": 940,
        "y": 520,
        "wires": []
    },
    {
        "id": "84a1512053cd5f10",
        "type": "http request",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "HTTP Req to pocasidoma",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://www.pocasidoma.cz/?ajax=getDetailMarker&idstation=360",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1040,
        "wires": [
            [
                "7f209b6dc426abd4"
            ]
        ]
    },
    {
        "id": "e9bc1d8d864cd01a",
        "type": "inject",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "84a1512053cd5f10"
            ]
        ]
    },
    {
        "id": "7f209b6dc426abd4",
        "type": "json",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 1040,
        "wires": [
            [
                "81bb3521bf046ed9",
                "cd4fd42d5ff75102"
            ]
        ]
    },
    {
        "id": "81bb3521bf046ed9",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Print parsed scraped JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1040,
        "wires": []
    },
    {
        "id": "0533be7df303af06",
        "type": "http in",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "",
        "url": "/luftdatenSensor",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 820,
        "wires": [
            [
                "259bf77f1b32d532",
                "1e4fd941529df255"
            ]
        ]
    },
    {
        "id": "259bf77f1b32d532",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Data from outdoors sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 760,
        "wires": []
    },
    {
        "id": "0961c32405383a51",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "OK Response",
        "statusCode": "",
        "headers": {},
        "x": 900,
        "y": 760,
        "wires": []
    },
    {
        "id": "1e4fd941529df255",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "JSON test",
        "func": "\n// Post Request does not containe JSON data, flow stops\nif(typeof(msg.payload) != \"object\" ){\n    msg.statusCode = 415;\n    msg.payload = \"Data are not in JSON format\";\n}\n// Empty JSON, flow stops\nelse if(JSON.stringify(msg.payload) == '{}'){\n    msg.statusCode = 422;\n    msg.payload = \"JSON is empty\";\n}\n\n// Everything is fine and we can proceed with rest of the code flow\nelse{\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 820,
        "wires": [
            [
                "b1769eb6983f968e",
                "fb9a65ca01590cc7"
            ]
        ]
    },
    {
        "id": "b1769eb6983f968e",
        "type": "switch",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "HTTP response switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 820,
        "wires": [
            [
                "0961c32405383a51",
                "3cc01fcea2cef0bb"
            ],
            [
                "6d06af34243d112a"
            ]
        ]
    },
    {
        "id": "fb9a65ca01590cc7",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Print outdoors JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 900,
        "wires": []
    },
    {
        "id": "6d06af34243d112a",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "HTTP Response on Error",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 860,
        "wires": []
    },
    {
        "id": "3a6ebff3b3ba3aff",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Prepare Timescaledb insert query",
        "func": "boiler_data = msg.payload;\n\nmsg.queryParameters = { \n    sensor_id: boiler_data.sensor_id,\n    board_type: boiler_data.board_type,\n    sensor_type: boiler_data.sensor_type,\n    tmp_in: boiler_data.tmp_in,\n    tmp_out: boiler_data.tmp_out,\n    dhw_tmp: boiler_data.dhw_tmp,\n    dhw_coil_tmp: boiler_data.dhw_coil_tmp\n}\n\nmsg.query = `INSERT INTO boiler_measurements (time, sensor_id, board_type, sensor_type, tmp_in, tmp_out, dhw_tmp, dhw_coil_tmp) \nVALUES (NOW(), $sensor_id, $board_type, $sensor_type, $tmp_in, $tmp_out, $dhw_tmp, $dhw_coil_tmp);`\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 560,
        "wires": [
            [
                "391fe0dd47fdfea7",
                "d1a778494bc55ec6"
            ]
        ]
    },
    {
        "id": "3cc01fcea2cef0bb",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Prepare Timescaledb insert query",
        "func": "sensor_data = msg.payload;\nvalue_names = [\"BME280_temperature\",\"BME280_pressure\", \"BME280_humidity\"];\nextracted_values ={};\n\n// Extracts data from JSON sent by luftdaten sensor\nsensor_data.sensordatavalues.forEach((value) => {\n    if (value_names.includes(value.value_type)){\n        extracted_values[value.value_type] = value.value;\n    }\n    \n})\n\nmsg.queryParameters = { \n    sensor_id: `luftdaten-${sensor_data.esp8266id}`,\n    board_type: \"esp8266\",\n    sensor_type: \"bme280\",\n    room: \"Outdoors\",\n    temperature: parseInt(extracted_values[\"BME280_temperature\"]),\n    pressure: parseInt(extracted_values[\"BME280_pressure\"]) / 100,\n    humidity: parseInt(extracted_values[\"BME280_humidity\"])\n}\n\nmsg.query = `INSERT INTO sensor_measurements (time, sensor_id, board_type, room, sensor_type, temperature, pressure, humidity) \nVALUES (NOW(), $sensor_id, $board_type, $room, $sensor_type, $temperature, $pressure, $humidity);`\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 800,
        "wires": [
            [
                "7c2978126c2f444c",
                "3d35b0b6290ff4c5"
            ]
        ]
    },
    {
        "id": "7c2978126c2f444c",
        "type": "postgresql",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1210,
        "y": 800,
        "wires": [
            [
                "994eb5b6fbb61d47"
            ]
        ]
    },
    {
        "id": "994eb5b6fbb61d47",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Print outdoors response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 800,
        "wires": []
    },
    {
        "id": "cd4fd42d5ff75102",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Prepare Timescaledb insert query",
        "func": "web_scrape_data = msg.payload.Data;\nvalue_names = [\"Vítr směr\", \"Tlak relat.\", \"Vlhkost ven.\", \"Teplota ven.\", \"Intenzita srážek\", \"Déšť\"];\nextracted_values = {};\n\nweb_scrape_data.allMeasures.forEach((value) => {\n    if (value_names.includes(value.Name)){\n        extracted_values[value.Name] = value.Value;\n    }\n    \n})\n\nmsg.queryParameters = { \n    sensor_id: `pocasidoma-${web_scrape_data.id}`,\n    sensor_type: \"Davis Vantage PRO2\",\n    room: \"Outdoors\",\n    temperature: extracted_values[\"Teplota ven.\"],\n    pressure: extracted_values[\"Tlak relat.\"],\n    humidity: extracted_values[\"Vlhkost ven.\"]\n}\n\nmsg.query = `INSERT INTO sensor_measurements (time, sensor_id, room, sensor_type, temperature, pressure, humidity) \nVALUES (NOW(), $sensor_id, $room, $sensor_type, $temperature, $pressure, $humidity);`\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1100,
        "wires": [
            [
                "703bd536e69dc5da",
                "875cd03620bc228e"
            ]
        ]
    },
    {
        "id": "703bd536e69dc5da",
        "type": "postgresql",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1150,
        "y": 1100,
        "wires": [
            [
                "597446dc812fa59d"
            ]
        ]
    },
    {
        "id": "597446dc812fa59d",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Print scraped response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1100,
        "wires": []
    },
    {
        "id": "391fe0dd47fdfea7",
        "type": "postgresql",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1230,
        "y": 560,
        "wires": [
            [
                "44e1c880e5af92ab"
            ]
        ]
    },
    {
        "id": "44e1c880e5af92ab",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Print boiler response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 560,
        "wires": []
    },
    {
        "id": "07d6b639cb962ff6",
        "type": "http in",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Get values from sensor",
        "url": "/postSensor",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "d2d9175cc521443a",
                "c979f22f6171cbe6"
            ]
        ]
    },
    {
        "id": "94204058074f2134",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "HTTP Response on Error",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 220,
        "wires": []
    },
    {
        "id": "d2d9175cc521443a",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print data from indoors sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 200,
        "wires": []
    },
    {
        "id": "d84deab32d24b48f",
        "type": "change",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Save sensor data  to flow",
        "rules": [
            {
                "t": "set",
                "p": "sensor_data",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.sensor_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 160,
        "wires": [
            [
                "78936ed5134682cd"
            ]
        ]
    },
    {
        "id": "c979f22f6171cbe6",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "JSON test",
        "func": "\n// Post Request does not containe JSON data, flow stops\nif(typeof(msg.payload) != \"object\" ){\n    msg.statusCode = 415;\n    msg.payload = \"Data are not in JSON format\";\n}\n// Empty JSON, flow stops\nelse if(JSON.stringify(msg.payload) == '{}'){\n    msg.statusCode = 422;\n    msg.payload = \"JSON is empty\";\n}\n\n// JSON does not contain all data, flow stops\n//else if(!(\"sensor_id\" in msg.payload && \"board_type\" in msg.payload && \"sensor_type\" in msg.payload && \"temperature\" in msg.payload && \"pressure\" in msg.payload && \"humidity\" in msg.payload)){\nelse if(!((\"sensor_id\", \"board_type\", \"sensor_type\", \"temperature\", \"pressure\", \"humidity\") in msg.payload )){\n    msg.statusCode = 422;\n    msg.payload = \"JSON doesn't have right format.\\r\\nJSON should have fields: sensor_id, board_type, sensor_type, temperature, pressure, humidity.\";\n}\n\n// Everything is fine and we can proceed with rest of the code flow\nelse{\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "b61e240e36ac6d7e",
                "213a26f8f0e4420a"
            ]
        ]
    },
    {
        "id": "b61e240e36ac6d7e",
        "type": "switch",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "HTTP response switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "d84deab32d24b48f",
                "50c8b9014b1bf57c"
            ],
            [
                "94204058074f2134"
            ]
        ]
    },
    {
        "id": "213a26f8f0e4420a",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print  indoors JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 100,
        "wires": []
    },
    {
        "id": "50c8b9014b1bf57c",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "HTTP Response OK",
        "statusCode": "",
        "headers": {},
        "x": 980,
        "y": 120,
        "wires": []
    },
    {
        "id": "a9c50bae42883c2e",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print results from Room query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 320,
        "wires": []
    },
    {
        "id": "a5224bf7b48d60d3",
        "type": "subflow:c4e5c2ecfe2a7d7c",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "x": 250,
        "y": 380,
        "wires": [
            [
                "8e4db32e74c6260d",
                "a9c50bae42883c2e",
                "dcfb038379c4c512"
            ]
        ]
    },
    {
        "id": "11b12c8f2978b551",
        "type": "link in",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "links": [
            "78936ed5134682cd"
        ],
        "x": 95,
        "y": 380,
        "wires": [
            [
                "a5224bf7b48d60d3"
            ]
        ]
    },
    {
        "id": "78936ed5134682cd",
        "type": "link out",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "mode": "link",
        "links": [
            "11b12c8f2978b551"
        ],
        "x": 1155,
        "y": 160,
        "wires": []
    },
    {
        "id": "8e4db32e74c6260d",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Prepare Timescaledb insert query",
        "func": "sensor_data = flow.get(\"sensor_data\");\nroom = msg.payload.room;\nmsg.topic = \"timescale_query\"\n\nif(room != \"Not specified\"){\n    msg.payload.queryParameters = {\n        sensor_id: sensor_data.sensor_id,\n        board_type: sensor_data.board_type,\n        sensor_type: sensor_data.sensor_type,\n        room: room,\n        temperature: sensor_data.temperature,\n        pressure: sensor_data.pressure,\n        humidity: sensor_data.humidity\n    }\n    \n    msg.payload.query = `INSERT INTO sensor_measurements (time, sensor_id, board_type, room, sensor_type, temperature, pressure, humidity) \n    VALUES (NOW(), $sensor_id, $board_type, $room, $sensor_type, $temperature, $pressure, $humidity);`\n    \n    return msg;\n}\n// If room is not set saves values from sensor without room\nelse {\n    msg.payload.queryParameters = {\n        sensor_id: sensor_data.sensor_id,\n        board_type: sensor_data.board_type,\n        sensor_type: sensor_data.sensor_type,\n        temperature: sensor_data.temperature,\n        pressure: sensor_data.pressure,\n        humidity: sensor_data.humidity\n        \n    };\n    \n    msg.payload.query = `INSERT INTO sensor_measurements (time, sensor_id, board_type, sensor_type, temperature, pressure, humidity) \n    VALUES (NOW(), $sensor_id, $board_type, $sensor_type, $temperature, $pressure, $humidity);`\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "dcfb038379c4c512",
                "495f4728cc474793"
            ]
        ]
    },
    {
        "id": "d051ac3741bf5474",
        "type": "postgresql",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1310,
        "y": 380,
        "wires": [
            [
                "f551cc72b4d1a714"
            ]
        ]
    },
    {
        "id": "f551cc72b4d1a714",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print indoors response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 380,
        "wires": []
    },
    {
        "id": "6460cd7cf5bdd4e9",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print joined msg.payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 340,
        "wires": []
    },
    {
        "id": "dcfb038379c4c512",
        "type": "join",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Join Queries",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 780,
        "y": 380,
        "wires": [
            [
                "6460cd7cf5bdd4e9",
                "1caa23e3de09d65d"
            ]
        ]
    },
    {
        "id": "495f4728cc474793",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print prepared indoors Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 300,
        "wires": []
    },
    {
        "id": "1caa23e3de09d65d",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Check room and send to Timescale",
        "func": "room_value = msg.payload.room_value;\ntimescale_query = msg.payload.timescale_query;\nif(!timescale_query.queryParameters.room || room_value.room === timescale_query.queryParameters.room && room_value.sensor_id === timescale_query.queryParameters.sensor_id){\n    msg.queryParameters = timescale_query.queryParameters;\n    msg.query = timescale_query.query;\n    return msg\n}\nelse{\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 380,
        "wires": [
            [
                "0aeaf07d09f146f9",
                "d051ac3741bf5474"
            ]
        ]
    },
    {
        "id": "0aeaf07d09f146f9",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print checked Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 340,
        "wires": []
    },
    {
        "id": "d1a778494bc55ec6",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Print prepared boiler Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 520,
        "wires": []
    },
    {
        "id": "3d35b0b6290ff4c5",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Print prepared outdoors Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 760,
        "wires": []
    },
    {
        "id": "875cd03620bc228e",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Print prepared scraped Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b6d5c0074129b3d4",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "timescaledb",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "example",
        "passwordFieldType": "str"
    }
]