[
    {
        "id": "6f295efb41de0f64",
        "type": "tab",
        "label": "Sensors API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "abcbbe81376760db",
        "type": "tab",
        "label": "Room selection UI",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9968b49e9c0c6894",
        "type": "tab",
        "label": "Sensor datetime api",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "07ac8830d610a027",
        "type": "tab",
        "label": "Alerting",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c4e5c2ecfe2a7d7c",
        "type": "subflow",
        "name": "Get Room",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 200,
                "wires": [
                    {
                        "id": "2f90ac2e6758dcb9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 200,
                "wires": [
                    {
                        "id": "aa6109e4a5c0be32",
                        "port": 0
                    },
                    {
                        "id": "5e515066c83f5d87",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "98df4c30829c6402",
        "type": "subflow",
        "name": "Get all sensor_ids",
        "info": "Gets all sensor_id values from InfluxDB",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "55da7c31a0954239"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 280,
                "wires": [
                    {
                        "id": "63c954b73f480d60",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f3de19ae627756a8",
        "type": "group",
        "z": "6f295efb41de0f64",
        "name": "Boiler sensor",
        "style": {
            "label": true
        },
        "nodes": [
            "8c3e16ee22c93023",
            "20b49a20a02f99d1",
            "613f7b6db7a9d2df",
            "50746b1e44afbbb9",
            "c62166d70d8a7cd2",
            "27a506d0afda7f4d",
            "0d50e7b83a890505",
            "391fe0dd47fdfea7",
            "44e1c880e5af92ab",
            "3a6ebff3b3ba3aff",
            "d1a778494bc55ec6"
        ],
        "x": 54,
        "y": 459,
        "w": 1512,
        "h": 202
    },
    {
        "id": "46ae6eaea7b98a6c",
        "type": "group",
        "z": "6f295efb41de0f64",
        "name": "Outdoors pocasidoma",
        "style": {
            "label": true
        },
        "nodes": [
            "84a1512053cd5f10",
            "e9bc1d8d864cd01a",
            "7f209b6dc426abd4",
            "81bb3521bf046ed9",
            "cd4fd42d5ff75102",
            "703bd536e69dc5da",
            "597446dc812fa59d",
            "875cd03620bc228e"
        ],
        "x": 54,
        "y": 999,
        "w": 1452,
        "h": 142
    },
    {
        "id": "91fb6c2e6d03d44f",
        "type": "group",
        "z": "6f295efb41de0f64",
        "name": "Outdoors sensor",
        "style": {
            "label": true
        },
        "nodes": [
            "0533be7df303af06",
            "259bf77f1b32d532",
            "0961c32405383a51",
            "1e4fd941529df255",
            "b1769eb6983f968e",
            "fb9a65ca01590cc7",
            "6d06af34243d112a",
            "3cc01fcea2cef0bb",
            "7c2978126c2f444c",
            "994eb5b6fbb61d47",
            "3d35b0b6290ff4c5"
        ],
        "x": 54,
        "y": 719,
        "w": 1512,
        "h": 222
    },
    {
        "id": "c2e3c67e8b32942e",
        "type": "group",
        "z": "6f295efb41de0f64",
        "name": "Indoors sensors",
        "style": {
            "label": true
        },
        "nodes": [
            "07d6b639cb962ff6",
            "94204058074f2134",
            "d2d9175cc521443a",
            "d84deab32d24b48f",
            "c979f22f6171cbe6",
            "b61e240e36ac6d7e",
            "213a26f8f0e4420a",
            "50c8b9014b1bf57c",
            "a9c50bae42883c2e",
            "a5224bf7b48d60d3",
            "11b12c8f2978b551",
            "78936ed5134682cd",
            "8e4db32e74c6260d",
            "d051ac3741bf5474",
            "f551cc72b4d1a714",
            "6460cd7cf5bdd4e9",
            "dcfb038379c4c512",
            "495f4728cc474793",
            "1caa23e3de09d65d",
            "0aeaf07d09f146f9"
        ],
        "x": 54,
        "y": 59,
        "w": 1592,
        "h": 362
    },
    {
        "id": "b6d5c0074129b3d4",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "timescaledb",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "example",
        "passwordFieldType": "str"
    },
    {
        "id": "d8aece7e220cdf0e",
        "type": "ui_group",
        "name": "Room",
        "tab": "d1f25c62d446af39",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d1f25c62d446af39",
        "type": "ui_tab",
        "name": "Sensor tab",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "323c913ae8a7db2c",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "2f90ac2e6758dcb9",
        "type": "function",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Create query",
        "func": "msg.queryParameters = { \n    sensor_id: msg.payload\n}\n\nmsg.query = \"SELECT * FROM sensors WHERE sensor_id = $sensor_id \"\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            [
                "42501e96d518dccc"
            ]
        ]
    },
    {
        "id": "aa6109e4a5c0be32",
        "type": "function",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Get object from array",
        "func": "msg.topic = \"room_value\"\nmsg.payload = msg.payload[0];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b50f2f9f75d72f28",
        "type": "switch",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Empty check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "aa6109e4a5c0be32"
            ],
            [
                "5e515066c83f5d87"
            ]
        ]
    },
    {
        "id": "5e515066c83f5d87",
        "type": "function",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Create empty object",
        "func": "msg.topic = \"Room-value\"\nmsg.payload = {\n    sensor_id: msg.sensor_id,\n    room: \"Not specified\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "42501e96d518dccc",
        "type": "postgresql",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 470,
        "y": 200,
        "wires": [
            [
                "b50f2f9f75d72f28"
            ]
        ]
    },
    {
        "id": "b979f2c4032b3704",
        "type": "split",
        "z": "98df4c30829c6402",
        "name": "Split values",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "payload",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "04c3fbb9e8fdb252"
            ]
        ]
    },
    {
        "id": "04c3fbb9e8fdb252",
        "type": "change",
        "z": "98df4c30829c6402",
        "name": "Get sensor_id",
        "rules": [
            {
                "t": "move",
                "p": "payload.sensor_id",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 240,
        "wires": [
            [
                "63c954b73f480d60"
            ]
        ]
    },
    {
        "id": "63c954b73f480d60",
        "type": "join",
        "z": "98df4c30829c6402",
        "name": "Join in array",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 190,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "01a62efd963d73c9",
        "type": "comment",
        "z": "98df4c30829c6402",
        "name": "Gets all sensor_id values from InfluxDB",
        "info": "",
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "55da7c31a0954239",
        "type": "postgresql",
        "z": "98df4c30829c6402",
        "name": "",
        "query": "SELECT DISTINCT sensor_id FROM sensor_measurements \nWHERE room != 'Outdoors' OR room IS NULL;",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "b979f2c4032b3704"
            ]
        ]
    },
    {
        "id": "8c3e16ee22c93023",
        "type": "http in",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Get values from boiler sensor",
        "url": "/postBoiler",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 560,
        "wires": [
            [
                "613f7b6db7a9d2df",
                "50746b1e44afbbb9"
            ]
        ]
    },
    {
        "id": "20b49a20a02f99d1",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "HTTP Response on Error",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 620,
        "wires": []
    },
    {
        "id": "613f7b6db7a9d2df",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Data from boiler sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 620,
        "wires": []
    },
    {
        "id": "50746b1e44afbbb9",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "JSON test",
        "func": "\n// Post Request does not containe JSON data, flow stops\nif(typeof(msg.payload) != \"object\" ){\n    msg.statusCode = 415;\n    msg.payload = \"Data are not in JSON format\";\n}\n// Empty JSON, flow stops\nelse if(JSON.stringify(msg.payload) == '{}'){\n    msg.statusCode = 422;\n    msg.payload = \"JSON is empty\";\n}\n\n// JSON does not contain all data, flow stops\nelse if(!(\"sensor_id\" in msg.payload && \"board_type\" in msg.payload && \"sensor_type\" in msg.payload && \"tmp_in\" in msg.payload && \"tmp_out\" in msg.payload && \"dhw_tmp\" in msg.payload && \"dhw_coil_tmp\" in msg.payload )){\n    msg.statusCode = 422;\n    msg.payload = \"JSON doesn't have right format.\\r\\nJSON should have fields: sensor_id, board_type, sensor_type, tmp_in, tmp_out, dhw_tmp, dhw_coil_tmp.\";\n}\n\n// Everything is fine and we can proceed with rest of the code flow\nelse{\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 560,
        "wires": [
            [
                "c62166d70d8a7cd2",
                "27a506d0afda7f4d"
            ]
        ]
    },
    {
        "id": "c62166d70d8a7cd2",
        "type": "switch",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "HTTP response switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 560,
        "wires": [
            [
                "0d50e7b83a890505",
                "3a6ebff3b3ba3aff"
            ],
            [
                "20b49a20a02f99d1"
            ]
        ]
    },
    {
        "id": "27a506d0afda7f4d",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Print boiler JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 500,
        "wires": []
    },
    {
        "id": "0d50e7b83a890505",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "HTTP Response OK",
        "statusCode": "",
        "headers": {},
        "x": 940,
        "y": 520,
        "wires": []
    },
    {
        "id": "84a1512053cd5f10",
        "type": "http request",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "HTTP Req to pocasidoma",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://www.pocasidoma.cz/?ajax=getDetailMarker&idstation=360",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1040,
        "wires": [
            [
                "7f209b6dc426abd4"
            ]
        ]
    },
    {
        "id": "e9bc1d8d864cd01a",
        "type": "inject",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "84a1512053cd5f10"
            ]
        ]
    },
    {
        "id": "7f209b6dc426abd4",
        "type": "json",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 1040,
        "wires": [
            [
                "81bb3521bf046ed9",
                "cd4fd42d5ff75102"
            ]
        ]
    },
    {
        "id": "81bb3521bf046ed9",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Print parsed scraped JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1040,
        "wires": []
    },
    {
        "id": "0533be7df303af06",
        "type": "http in",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "",
        "url": "/luftdatenSensor",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 820,
        "wires": [
            [
                "259bf77f1b32d532",
                "1e4fd941529df255"
            ]
        ]
    },
    {
        "id": "259bf77f1b32d532",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Data from outdoors sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 760,
        "wires": []
    },
    {
        "id": "0961c32405383a51",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "OK Response",
        "statusCode": "",
        "headers": {},
        "x": 900,
        "y": 760,
        "wires": []
    },
    {
        "id": "1e4fd941529df255",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "JSON test",
        "func": "\n// Post Request does not containe JSON data, flow stops\nif(typeof(msg.payload) != \"object\" ){\n    msg.statusCode = 415;\n    msg.payload = \"Data are not in JSON format\";\n}\n// Empty JSON, flow stops\nelse if(JSON.stringify(msg.payload) == '{}'){\n    msg.statusCode = 422;\n    msg.payload = \"JSON is empty\";\n}\n\n// Everything is fine and we can proceed with rest of the code flow\nelse{\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 820,
        "wires": [
            [
                "b1769eb6983f968e",
                "fb9a65ca01590cc7"
            ]
        ]
    },
    {
        "id": "b1769eb6983f968e",
        "type": "switch",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "HTTP response switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 820,
        "wires": [
            [
                "0961c32405383a51",
                "3cc01fcea2cef0bb"
            ],
            [
                "6d06af34243d112a"
            ]
        ]
    },
    {
        "id": "fb9a65ca01590cc7",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Print outdoors JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 900,
        "wires": []
    },
    {
        "id": "6d06af34243d112a",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "HTTP Response on Error",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 860,
        "wires": []
    },
    {
        "id": "3a6ebff3b3ba3aff",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Prepare Timescaledb insert query",
        "func": "boiler_data = msg.payload;\n\nmsg.queryParameters = { \n    sensor_id: boiler_data.sensor_id,\n    board_type: boiler_data.board_type,\n    sensor_type: boiler_data.sensor_type,\n    tmp_in: boiler_data.tmp_in,\n    tmp_out: boiler_data.tmp_out,\n    dhw_tmp: boiler_data.dhw_tmp,\n    dhw_coil_tmp: boiler_data.dhw_coil_tmp\n}\n\nmsg.query = `INSERT INTO boiler_measurements (time, sensor_id, board_type, sensor_type, tmp_in, tmp_out, dhw_tmp, dhw_coil_tmp) \nVALUES (NOW(), $sensor_id, $board_type, $sensor_type, $tmp_in, $tmp_out, $dhw_tmp, $dhw_coil_tmp);`\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 560,
        "wires": [
            [
                "391fe0dd47fdfea7",
                "d1a778494bc55ec6"
            ]
        ]
    },
    {
        "id": "3cc01fcea2cef0bb",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Prepare Timescaledb insert query",
        "func": "sensor_data = msg.payload;\nvalue_names = [\"BME280_temperature\",\"BME280_pressure\", \"BME280_humidity\"];\nextracted_values ={};\n\n// Extracts data from JSON sent by luftdaten sensor\nsensor_data.sensordatavalues.forEach((value) => {\n    if (value_names.includes(value.value_type)){\n        extracted_values[value.value_type] = value.value;\n    }\n    \n})\n\nmsg.queryParameters = { \n    sensor_id: `luftdaten-${sensor_data.esp8266id}`,\n    board_type: \"esp8266\",\n    sensor_type: \"bme280\",\n    room: \"Outdoors\",\n    temperature: parseInt(extracted_values[\"BME280_temperature\"]),\n    pressure: parseInt(extracted_values[\"BME280_pressure\"]) / 100,\n    humidity: parseInt(extracted_values[\"BME280_humidity\"])\n}\n\nmsg.query = `INSERT INTO sensor_measurements (time, sensor_id, board_type, room, sensor_type, temperature, pressure, humidity) \nVALUES (NOW(), $sensor_id, $board_type, $room, $sensor_type, $temperature, $pressure, $humidity);`\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 800,
        "wires": [
            [
                "7c2978126c2f444c",
                "3d35b0b6290ff4c5"
            ]
        ]
    },
    {
        "id": "7c2978126c2f444c",
        "type": "postgresql",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1210,
        "y": 800,
        "wires": [
            [
                "994eb5b6fbb61d47"
            ]
        ]
    },
    {
        "id": "994eb5b6fbb61d47",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Print outdoors response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 800,
        "wires": []
    },
    {
        "id": "cd4fd42d5ff75102",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Prepare Timescaledb insert query",
        "func": "web_scrape_data = msg.payload.Data;\nvalue_names = [\"Vítr směr\", \"Tlak relat.\", \"Vlhkost ven.\", \"Teplota ven.\", \"Intenzita srážek\", \"Déšť\"];\nextracted_values = {};\n\nweb_scrape_data.allMeasures.forEach((value) => {\n    if (value_names.includes(value.Name)){\n        extracted_values[value.Name] = value.Value;\n    }\n    \n})\n\nmsg.queryParameters = { \n    sensor_id: `pocasidoma-${web_scrape_data.id}`,\n    sensor_type: \"Davis Vantage PRO2\",\n    room: \"Outdoors\",\n    temperature: extracted_values[\"Teplota ven.\"],\n    pressure: extracted_values[\"Tlak relat.\"],\n    humidity: extracted_values[\"Vlhkost ven.\"]\n}\n\nmsg.query = `INSERT INTO sensor_measurements (time, sensor_id, room, sensor_type, temperature, pressure, humidity) \nVALUES (NOW(), $sensor_id, $room, $sensor_type, $temperature, $pressure, $humidity);`\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1100,
        "wires": [
            [
                "703bd536e69dc5da",
                "875cd03620bc228e"
            ]
        ]
    },
    {
        "id": "703bd536e69dc5da",
        "type": "postgresql",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1150,
        "y": 1100,
        "wires": [
            [
                "597446dc812fa59d"
            ]
        ]
    },
    {
        "id": "597446dc812fa59d",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Print scraped response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1100,
        "wires": []
    },
    {
        "id": "391fe0dd47fdfea7",
        "type": "postgresql",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1230,
        "y": 560,
        "wires": [
            [
                "44e1c880e5af92ab"
            ]
        ]
    },
    {
        "id": "44e1c880e5af92ab",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Print boiler response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 560,
        "wires": []
    },
    {
        "id": "07d6b639cb962ff6",
        "type": "http in",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Get values from sensor",
        "url": "/postSensor",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "d2d9175cc521443a",
                "c979f22f6171cbe6"
            ]
        ]
    },
    {
        "id": "94204058074f2134",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "HTTP Response on Error",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 220,
        "wires": []
    },
    {
        "id": "d2d9175cc521443a",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print data from indoors sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 200,
        "wires": []
    },
    {
        "id": "d84deab32d24b48f",
        "type": "change",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Save sensor data  to flow",
        "rules": [
            {
                "t": "set",
                "p": "sensor_data",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.sensor_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 160,
        "wires": [
            [
                "78936ed5134682cd"
            ]
        ]
    },
    {
        "id": "c979f22f6171cbe6",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "JSON test",
        "func": "\n// Post Request does not containe JSON data, flow stops\nif(typeof(msg.payload) != \"object\" ){\n    msg.statusCode = 415;\n    msg.payload = \"Data are not in JSON format\";\n}\n// Empty JSON, flow stops\nelse if(JSON.stringify(msg.payload) == '{}'){\n    msg.statusCode = 422;\n    msg.payload = \"JSON is empty\";\n}\n\n// JSON does not contain all data, flow stops\n//else if(!(\"sensor_id\" in msg.payload && \"board_type\" in msg.payload && \"sensor_type\" in msg.payload && \"temperature\" in msg.payload && \"pressure\" in msg.payload && \"humidity\" in msg.payload)){\nelse if(!((\"sensor_id\", \"board_type\", \"sensor_type\", \"temperature\", \"pressure\", \"humidity\") in msg.payload )){\n    msg.statusCode = 422;\n    msg.payload = \"JSON doesn't have right format.\\r\\nJSON should have fields: sensor_id, board_type, sensor_type, temperature, pressure, humidity.\";\n}\n\n// Everything is fine and we can proceed with rest of the code flow\nelse{\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "b61e240e36ac6d7e",
                "213a26f8f0e4420a"
            ]
        ]
    },
    {
        "id": "b61e240e36ac6d7e",
        "type": "switch",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "HTTP response switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "d84deab32d24b48f",
                "50c8b9014b1bf57c"
            ],
            [
                "94204058074f2134"
            ]
        ]
    },
    {
        "id": "213a26f8f0e4420a",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print  indoors JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 100,
        "wires": []
    },
    {
        "id": "50c8b9014b1bf57c",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "HTTP Response OK",
        "statusCode": "",
        "headers": {},
        "x": 980,
        "y": 120,
        "wires": []
    },
    {
        "id": "a9c50bae42883c2e",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print results from Room query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 320,
        "wires": []
    },
    {
        "id": "a5224bf7b48d60d3",
        "type": "subflow:c4e5c2ecfe2a7d7c",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "x": 250,
        "y": 380,
        "wires": [
            [
                "8e4db32e74c6260d",
                "a9c50bae42883c2e",
                "dcfb038379c4c512"
            ]
        ]
    },
    {
        "id": "11b12c8f2978b551",
        "type": "link in",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "links": [
            "78936ed5134682cd"
        ],
        "x": 95,
        "y": 380,
        "wires": [
            [
                "a5224bf7b48d60d3"
            ]
        ]
    },
    {
        "id": "78936ed5134682cd",
        "type": "link out",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "mode": "link",
        "links": [
            "11b12c8f2978b551"
        ],
        "x": 1155,
        "y": 160,
        "wires": []
    },
    {
        "id": "8e4db32e74c6260d",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Prepare Timescaledb insert query",
        "func": "sensor_data = flow.get(\"sensor_data\");\nroom = msg.payload.room;\nmsg.topic = \"timescale_query\"\n\nif(room != \"Not specified\"){\n    msg.payload.queryParameters = {\n        sensor_id: sensor_data.sensor_id,\n        board_type: sensor_data.board_type,\n        sensor_type: sensor_data.sensor_type,\n        room: room,\n        temperature: sensor_data.temperature,\n        pressure: sensor_data.pressure,\n        humidity: sensor_data.humidity\n    }\n    \n    msg.payload.query = `INSERT INTO sensor_measurements (time, sensor_id, board_type, room, sensor_type, temperature, pressure, humidity) \n    VALUES (NOW(), $sensor_id, $board_type, $room, $sensor_type, $temperature, $pressure, $humidity);`\n    \n    return msg;\n}\n// If room is not set saves values from sensor without room\nelse {\n    msg.payload.queryParameters = {\n        sensor_id: sensor_data.sensor_id,\n        board_type: sensor_data.board_type,\n        sensor_type: sensor_data.sensor_type,\n        temperature: sensor_data.temperature,\n        pressure: sensor_data.pressure,\n        humidity: sensor_data.humidity\n        \n    };\n    \n    msg.payload.query = `INSERT INTO sensor_measurements (time, sensor_id, board_type, sensor_type, temperature, pressure, humidity) \n    VALUES (NOW(), $sensor_id, $board_type, $sensor_type, $temperature, $pressure, $humidity);`\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "dcfb038379c4c512",
                "495f4728cc474793"
            ]
        ]
    },
    {
        "id": "d051ac3741bf5474",
        "type": "postgresql",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1310,
        "y": 380,
        "wires": [
            [
                "f551cc72b4d1a714"
            ]
        ]
    },
    {
        "id": "f551cc72b4d1a714",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print indoors response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 380,
        "wires": []
    },
    {
        "id": "6460cd7cf5bdd4e9",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print joined msg.payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 340,
        "wires": []
    },
    {
        "id": "dcfb038379c4c512",
        "type": "join",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Join Queries",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 780,
        "y": 380,
        "wires": [
            [
                "6460cd7cf5bdd4e9",
                "1caa23e3de09d65d"
            ]
        ]
    },
    {
        "id": "495f4728cc474793",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print prepared indoors Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 300,
        "wires": []
    },
    {
        "id": "1caa23e3de09d65d",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Check room and send to Timescale",
        "func": "room_value = msg.payload.room_value;\ntimescale_query = msg.payload.timescale_query;\nif(!timescale_query.queryParameters.room || room_value.room === timescale_query.queryParameters.room && room_value.sensor_id === timescale_query.queryParameters.sensor_id){\n    msg.queryParameters = timescale_query.queryParameters;\n    msg.query = timescale_query.query;\n    return msg\n}\nelse{\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 380,
        "wires": [
            [
                "0aeaf07d09f146f9",
                "d051ac3741bf5474"
            ]
        ]
    },
    {
        "id": "0aeaf07d09f146f9",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print checked Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 340,
        "wires": []
    },
    {
        "id": "d1a778494bc55ec6",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Print prepared boiler Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 520,
        "wires": []
    },
    {
        "id": "3d35b0b6290ff4c5",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Print prepared outdoors Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 760,
        "wires": []
    },
    {
        "id": "875cd03620bc228e",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Print prepared scraped Timescale query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6d21a86ecb38f6c0",
        "type": "ui_dropdown",
        "z": "abcbbe81376760db",
        "name": "Choose sensor_id",
        "label": "",
        "tooltip": "",
        "place": "Select a sensor_id",
        "group": "d8aece7e220cdf0e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 810,
        "y": 240,
        "wires": [
            [
                "c9aafd3f212e8e2a",
                "b1847f677738ea9c"
            ]
        ]
    },
    {
        "id": "4c70d5405294bd49",
        "type": "subflow:98df4c30829c6402",
        "z": "abcbbe81376760db",
        "name": "",
        "env": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "eb1b895e6a4e47b4",
                "a2d0f585d960bf09"
            ]
        ]
    },
    {
        "id": "a2d0f585d960bf09",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print sensor IDs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 200,
        "wires": []
    },
    {
        "id": "fbbe2da644ed9939",
        "type": "ui_ui_control",
        "z": "abcbbe81376760db",
        "name": "Reset web UI",
        "events": "connect",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "4c70d5405294bd49",
                "92d5f099273b2155",
                "957cd4579c8a4e95"
            ]
        ]
    },
    {
        "id": "5bfd86873d4e1b17",
        "type": "ui_text",
        "z": "abcbbe81376760db",
        "group": "d8aece7e220cdf0e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Show current room",
        "label": "Current room of sensor:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1080,
        "y": 680,
        "wires": []
    },
    {
        "id": "5680a189a68fb36c",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print ound room for sensor_id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 280,
        "wires": []
    },
    {
        "id": "b0db298bdc56c80c",
        "type": "link in",
        "z": "abcbbe81376760db",
        "name": "",
        "links": [
            "a986ee886b8cdeb3"
        ],
        "x": 65,
        "y": 680,
        "wires": [
            [
                "90e782b358cbc58a",
                "be3caf10bde2f1d8",
                "6596de9d82e63d9d"
            ]
        ]
    },
    {
        "id": "40005c2dfeb4d635",
        "type": "ui_form",
        "z": "abcbbe81376760db",
        "name": "Update room",
        "label": "",
        "group": "d8aece7e220cdf0e",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Room",
                "value": "room",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "room": ""
        },
        "payload": "",
        "submit": "Save",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 540,
        "y": 620,
        "wires": [
            [
                "adbbc86fe33c1ae9",
                "9627fd9365e8311b",
                "fed7b519eda96c93"
            ]
        ]
    },
    {
        "id": "5e85f38e385f6511",
        "type": "change",
        "z": "abcbbe81376760db",
        "name": "Move sensor_id val to flow",
        "rules": [
            {
                "t": "set",
                "p": "sensor_id",
                "pt": "flow",
                "to": "queryParameters.sensor_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 240,
        "wires": [
            [
                "a986ee886b8cdeb3"
            ]
        ]
    },
    {
        "id": "a986ee886b8cdeb3",
        "type": "link out",
        "z": "abcbbe81376760db",
        "name": "Output room val",
        "mode": "link",
        "links": [
            "b0db298bdc56c80c"
        ],
        "x": 1465,
        "y": 240,
        "wires": []
    },
    {
        "id": "d2bb9f0b9a3dedb1",
        "type": "change",
        "z": "abcbbe81376760db",
        "name": "Reset room val",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "None",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 740,
        "wires": [
            [
                "5bfd86873d4e1b17"
            ]
        ]
    },
    {
        "id": "23b3b3b4f7d6613d",
        "type": "link out",
        "z": "abcbbe81376760db",
        "name": "RESET INPUT",
        "mode": "link",
        "links": [
            "798686e05470ab84",
            "2cc695e8368b3ec8"
        ],
        "x": 565,
        "y": 420,
        "wires": []
    },
    {
        "id": "798686e05470ab84",
        "type": "link in",
        "z": "abcbbe81376760db",
        "name": "Reset link 2",
        "links": [
            "23b3b3b4f7d6613d"
        ],
        "x": 715,
        "y": 740,
        "wires": [
            [
                "d2bb9f0b9a3dedb1"
            ]
        ]
    },
    {
        "id": "9627fd9365e8311b",
        "type": "function",
        "z": "abcbbe81376760db",
        "name": "Update room label",
        "func": "room = msg.payload.room\nif (room != \"Room not yet set\" && !room.includes(\"-\")) {\n    msg.payload = `Sensor set to ${msg.payload.room}`\n    return msg\n}\nelse if(room.includes(\"-\")){\n    msg.payload = \"Room name cant include -\"\n    return msg;\n}\nelse{\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 600,
        "wires": [
            [
                "77e6620d5b1454a8",
                "a2fb98afc6c338b7",
                "5bfd86873d4e1b17"
            ]
        ]
    },
    {
        "id": "adbbc86fe33c1ae9",
        "type": "function",
        "z": "abcbbe81376760db",
        "name": "Handle DB room update",
        "func": "sensor_id = flow.get('sensor_id')\nroom = msg.payload.room\nif (room != \"Room not yet set\" && !room.includes(\"-\")) {\n    msg.queryParameters = { \n        sensor_id: sensor_id,\n        room: room\n    }\n    \n    msg.query = `INSERT INTO sensors (sensor_id, room) \n    VALUES ($sensor_id, $room) ON CONFLICT (sensor_id)\n    DO UPDATE SET room = $room;`\n    \n    return msg;\n}\nelse{\n    msg.payload = \"failed\"\n    return msg;\n}\n\n\n    ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 540,
        "wires": [
            [
                "aa9c932034100adb",
                "98daa093b08c8f89"
            ]
        ]
    },
    {
        "id": "7c51acc01546c98e",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 540,
        "wires": []
    },
    {
        "id": "c9aafd3f212e8e2a",
        "type": "subflow:c4e5c2ecfe2a7d7c",
        "z": "abcbbe81376760db",
        "name": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "5e85f38e385f6511",
                "5680a189a68fb36c"
            ]
        ]
    },
    {
        "id": "2cc695e8368b3ec8",
        "type": "link in",
        "z": "abcbbe81376760db",
        "name": "",
        "links": [
            "23b3b3b4f7d6613d",
            "ac78c5f7cdf22fbe",
            "85b54c58614f8b94"
        ],
        "x": 1185,
        "y": 640,
        "wires": [
            [
                "a2fb98afc6c338b7"
            ]
        ]
    },
    {
        "id": "0ef91984d65b4640",
        "type": "ui_button",
        "z": "abcbbe81376760db",
        "name": "Reset button",
        "group": "d8aece7e220cdf0e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reload_sensor_ids",
        "tooltip": "",
        "color": "white",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "4c70d5405294bd49",
                "92d5f099273b2155",
                "957cd4579c8a4e95"
            ]
        ]
    },
    {
        "id": "92d5f099273b2155",
        "type": "change",
        "z": "abcbbe81376760db",
        "name": "Update output label",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "UI Reset complete",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 360,
        "wires": [
            [
                "23b3b3b4f7d6613d"
            ]
        ]
    },
    {
        "id": "2c85d54f4f8098c8",
        "type": "ui_button",
        "z": "abcbbe81376760db",
        "name": "Unset room button",
        "group": "d8aece7e220cdf0e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Unset room from sensor",
        "tooltip": "",
        "color": "white",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 540,
        "y": 800,
        "wires": [
            [
                "10721ef50652b960"
            ]
        ]
    },
    {
        "id": "b1847f677738ea9c",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print chosen sensor ID from UI",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 200,
        "wires": []
    },
    {
        "id": "90e782b358cbc58a",
        "type": "change",
        "z": "abcbbe81376760db",
        "name": "Send room to update button",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.room",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 680,
        "wires": [
            [
                "40005c2dfeb4d635",
                "c39a69a032d82237",
                "5bfd86873d4e1b17"
            ]
        ]
    },
    {
        "id": "6596de9d82e63d9d",
        "type": "change",
        "z": "abcbbe81376760db",
        "name": "Send sensor_id to unset button",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.sensor_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 800,
        "wires": [
            [
                "2c85d54f4f8098c8"
            ]
        ]
    },
    {
        "id": "c39a69a032d82237",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print room",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 560,
        "wires": []
    },
    {
        "id": "10721ef50652b960",
        "type": "function",
        "z": "abcbbe81376760db",
        "name": "Unset room from sensor_id",
        "func": "\nif (msg.topic != null){\n    \n    msg.queryParameters = { \n        sensor_id: msg.topic\n    }\n    \n    msg.query = \"DELETE FROM sensors WHERE sensor_id = $sensor_id;\"\n\n    return msg;   \n    \n}\nelse{\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 800,
        "wires": [
            [
                "e0d835eccc458c4c",
                "d010587c21512e8e",
                "0d19a90fd1023b0b"
            ]
        ]
    },
    {
        "id": "8ff6fac16d9a9463",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print Sensor_id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 800,
        "wires": []
    },
    {
        "id": "85b54c58614f8b94",
        "type": "link out",
        "z": "abcbbe81376760db",
        "name": "",
        "mode": "link",
        "links": [
            "2cc695e8368b3ec8",
            "998fd6d68816438c"
        ],
        "x": 1265,
        "y": 860,
        "wires": []
    },
    {
        "id": "e0d835eccc458c4c",
        "type": "function",
        "z": "abcbbe81376760db",
        "name": "Update output label",
        "func": "msg.payload = `Unset room from ID ${msg.queryParameters.sensor_id}`\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 860,
        "wires": [
            [
                "85b54c58614f8b94"
            ]
        ]
    },
    {
        "id": "54375fe57fa89d66",
        "type": "link in",
        "z": "abcbbe81376760db",
        "name": "",
        "links": [
            "782b28977b67670b"
        ],
        "x": 375,
        "y": 860,
        "wires": [
            [
                "2c85d54f4f8098c8"
            ]
        ]
    },
    {
        "id": "782b28977b67670b",
        "type": "link out",
        "z": "abcbbe81376760db",
        "name": "",
        "mode": "link",
        "links": [
            "54375fe57fa89d66"
        ],
        "x": 605,
        "y": 300,
        "wires": []
    },
    {
        "id": "957cd4579c8a4e95",
        "type": "function",
        "z": "abcbbe81376760db",
        "name": "Reset UI values",
        "func": "msg = null;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 300,
        "wires": [
            [
                "782b28977b67670b"
            ]
        ]
    },
    {
        "id": "eb1b895e6a4e47b4",
        "type": "change",
        "z": "abcbbe81376760db",
        "name": "Pass to msg.options",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "options",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 240,
        "wires": [
            [
                "6d21a86ecb38f6c0"
            ]
        ]
    },
    {
        "id": "e46758cf77ce259b",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print rooms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 100,
        "wires": []
    },
    {
        "id": "56dc7e81c32fc641",
        "type": "function",
        "z": "abcbbe81376760db",
        "name": "Rooms query",
        "func": "msg.query = \"SELECT * FROM sensors;\"\n//msg.topic=`DELETE FROM sensors where sensor_id=\"postman-1\";`\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 100,
        "wires": [
            [
                "68718625666dcb05"
            ]
        ]
    },
    {
        "id": "03a752480ff880c7",
        "type": "inject",
        "z": "abcbbe81376760db",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "56dc7e81c32fc641"
            ]
        ]
    },
    {
        "id": "04630c6cbb953a4b",
        "type": "comment",
        "z": "abcbbe81376760db",
        "name": "Debug select for all rooms in DB",
        "info": "",
        "x": 390,
        "y": 60,
        "wires": []
    },
    {
        "id": "68718625666dcb05",
        "type": "postgresql",
        "z": "abcbbe81376760db",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 530,
        "y": 100,
        "wires": [
            [
                "e46758cf77ce259b"
            ]
        ]
    },
    {
        "id": "aa9c932034100adb",
        "type": "postgresql",
        "z": "abcbbe81376760db",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 540,
        "wires": [
            [
                "7c51acc01546c98e"
            ]
        ]
    },
    {
        "id": "d010587c21512e8e",
        "type": "postgresql",
        "z": "abcbbe81376760db",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1039,
        "y": 800,
        "wires": [
            [
                "8ff6fac16d9a9463"
            ]
        ]
    },
    {
        "id": "98daa093b08c8f89",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 500,
        "wires": []
    },
    {
        "id": "0d19a90fd1023b0b",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print unset room",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 920,
        "wires": []
    },
    {
        "id": "be3caf10bde2f1d8",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print sensor_id and room",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 620,
        "wires": []
    },
    {
        "id": "fed7b519eda96c93",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print new room",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 640,
        "wires": []
    },
    {
        "id": "998fd6d68816438c",
        "type": "link in",
        "z": "abcbbe81376760db",
        "name": "",
        "links": [
            "ac78c5f7cdf22fbe",
            "59cbff11d4dd6b53",
            "85b54c58614f8b94"
        ],
        "x": 175,
        "y": 420,
        "wires": [
            [
                "957cd4579c8a4e95",
                "23b3b3b4f7d6613d"
            ]
        ]
    },
    {
        "id": "77e6620d5b1454a8",
        "type": "debug",
        "z": "abcbbe81376760db",
        "name": "Print output label text",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 640,
        "wires": []
    },
    {
        "id": "a2fb98afc6c338b7",
        "type": "ui_text",
        "z": "abcbbe81376760db",
        "group": "d8aece7e220cdf0e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Output label",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1300,
        "y": 600,
        "wires": []
    },
    {
        "id": "c073391072a5ba7a",
        "type": "http in",
        "z": "9968b49e9c0c6894",
        "name": "HTTP get time",
        "url": "/datetime",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "76b6b247e2b0e62b"
            ]
        ]
    },
    {
        "id": "76b6b247e2b0e62b",
        "type": "exec",
        "z": "9968b49e9c0c6894",
        "command": "date -I'seconds'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 140,
        "wires": [
            [
                "4519853c0f89687c",
                "fa7a6e9726dfd4bd"
            ],
            [],
            []
        ]
    },
    {
        "id": "4519853c0f89687c",
        "type": "debug",
        "z": "9968b49e9c0c6894",
        "name": "Datetime",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 60,
        "wires": []
    },
    {
        "id": "24842cf75ebe60a5",
        "type": "http response",
        "z": "9968b49e9c0c6894",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 140,
        "wires": []
    },
    {
        "id": "fa7a6e9726dfd4bd",
        "type": "function",
        "z": "9968b49e9c0c6894",
        "name": "Convert to GMT+2",
        "func": "\n// 2022-09-08T17:08:38+0000 everything after plus is removed\nlet date = new Date(msg.payload.split(\"+\")[0]);\n\ndate.setTime(date.getTime() + 2 * 60 * 60 * 1000);\nmsg.payload = `{\"datetime\":\"${date.toISOString().split(\".\")[0]}\"}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 140,
        "wires": [
            [
                "24842cf75ebe60a5"
            ]
        ]
    },
    {
        "id": "ada0f6b1aec3df3f",
        "type": "debug",
        "z": "07ac8830d610a027",
        "name": "Print rooms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 300,
        "wires": []
    },
    {
        "id": "92f4d0dd5b907503",
        "type": "function",
        "z": "07ac8830d610a027",
        "name": "Rooms query",
        "func": "msg.query = \"SELECT DISTINCT room FROM sensors;\"\n//msg.topic=`DELETE FROM sensors where sensor_id=\"postman-1\";`\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            [
                "31cf1eba7e672bcd",
                "fe2ee9eb3e64508e"
            ]
        ]
    },
    {
        "id": "6851fc4e1d98013d",
        "type": "split",
        "z": "07ac8830d610a027",
        "name": "Split values",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "payload",
        "x": 1010,
        "y": 360,
        "wires": [
            [
                "226fa191b5078f7c"
            ]
        ]
    },
    {
        "id": "226fa191b5078f7c",
        "type": "change",
        "z": "07ac8830d610a027",
        "name": "Get room",
        "rules": [
            {
                "t": "move",
                "p": "payload.room",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 360,
        "wires": [
            [
                "ada0f6b1aec3df3f",
                "50818ff4fa3a9b25"
            ]
        ]
    },
    {
        "id": "f88830bc51caac2a",
        "type": "function",
        "z": "07ac8830d610a027",
        "name": "For each room check if data is send",
        "func": "msg.queryParameters = { \n    room: msg.payload\n}\n\nmsg.query = \"SELECT * FROM sensor_measurements WHERE room = $room AND time >= NOW() - INTERVAL '1 hour'\"\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 460,
        "wires": [
            [
                "8bb1e2331482daae"
            ]
        ]
    },
    {
        "id": "23aa29954e8277d1",
        "type": "debug",
        "z": "07ac8830d610a027",
        "name": "Print results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 420,
        "wires": []
    },
    {
        "id": "24ad4f2e896be3c7",
        "type": "switch",
        "z": "07ac8830d610a027",
        "name": "If sensor has no data",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 460,
        "wires": [
            [
                "3beb2940e9859e99"
            ]
        ]
    },
    {
        "id": "3beb2940e9859e99",
        "type": "function",
        "z": "07ac8830d610a027",
        "name": "Send notification to Discord",
        "func": "msg.payload = {\n    content: `@everyone - Sensor set to room ${msg.queryParameters.room} isn't sending data to InfluxDB. Please check it.`\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "841526c51b1fb5dd"
            ]
        ]
    },
    {
        "id": "841526c51b1fb5dd",
        "type": "http request",
        "z": "07ac8830d610a027",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://discord.com/api/webhooks/1221156469416788028/spLtZ-g3rRWSlaAM-xZHyl1JdER6mjMHfgmLWPQvUX9gXxSUZJ8CXlTmb3CnqIzDH3TK",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 460,
        "wires": [
            [
                "babb6b07ee396b44"
            ]
        ]
    },
    {
        "id": "31938c4d519cf419",
        "type": "link in",
        "z": "07ac8830d610a027",
        "name": "link in 1",
        "links": [
            "50818ff4fa3a9b25"
        ],
        "x": 85,
        "y": 460,
        "wires": [
            [
                "f88830bc51caac2a"
            ]
        ]
    },
    {
        "id": "50818ff4fa3a9b25",
        "type": "link out",
        "z": "07ac8830d610a027",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "31938c4d519cf419"
        ],
        "x": 1325,
        "y": 360,
        "wires": []
    },
    {
        "id": "1c488b8dc21bd9f2",
        "type": "exec",
        "z": "07ac8830d610a027",
        "command": "date -I'seconds'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 220,
        "wires": [
            [
                "05eb6e5a47c4e318"
            ],
            [],
            []
        ]
    },
    {
        "id": "05eb6e5a47c4e318",
        "type": "function",
        "z": "07ac8830d610a027",
        "name": "Create msg.payload",
        "func": "\n// 2022-09-08T17:08:38+0000 everything after plus is removed\nlet date = new Date(msg.payload.split(\"+\")[0]);\nUTC_date = `${date.toISOString().split(\".\")[0]}`;\n\ndate.setTime(date.getTime() + 2 * 60 * 60 * 1000);\nLocal_date = `${date.toISOString().split(\".\")[0]}`;\n\n\nmsg.payload = \n\n`\nRunning automation at: \nUTC time  ${UTC_date}\nGMT+2  ${Local_date}\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 220,
        "wires": [
            [
                "3bcc7253abd8b325"
            ]
        ]
    },
    {
        "id": "3bcc7253abd8b325",
        "type": "debug",
        "z": "07ac8830d610a027",
        "name": "Print msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 220,
        "wires": []
    },
    {
        "id": "60ecebe5d7d9bf8f",
        "type": "inject",
        "z": "07ac8830d610a027",
        "name": "Workdays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 19-21 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "92f4d0dd5b907503",
                "1c488b8dc21bd9f2"
            ]
        ]
    },
    {
        "id": "1f0d165122286e2f",
        "type": "inject",
        "z": "07ac8830d610a027",
        "name": "Weekend",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 10-21 * * 6,0",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "92f4d0dd5b907503",
                "1c488b8dc21bd9f2"
            ]
        ]
    },
    {
        "id": "31cf1eba7e672bcd",
        "type": "postgresql",
        "z": "07ac8830d610a027",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 550,
        "y": 360,
        "wires": [
            [
                "ab972221879db998",
                "01d76788eddb7676"
            ]
        ]
    },
    {
        "id": "fe2ee9eb3e64508e",
        "type": "debug",
        "z": "07ac8830d610a027",
        "name": "Print rooms query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 300,
        "wires": []
    },
    {
        "id": "ab972221879db998",
        "type": "debug",
        "z": "07ac8830d610a027",
        "name": "Print db response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 320,
        "wires": []
    },
    {
        "id": "8bb1e2331482daae",
        "type": "postgresql",
        "z": "07ac8830d610a027",
        "name": "",
        "query": "",
        "postgreSQLConfig": "b6d5c0074129b3d4",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 550,
        "y": 460,
        "wires": [
            [
                "24ad4f2e896be3c7",
                "23aa29954e8277d1"
            ]
        ]
    },
    {
        "id": "babb6b07ee396b44",
        "type": "debug",
        "z": "07ac8830d610a027",
        "name": "Print http response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 460,
        "wires": []
    },
    {
        "id": "01d76788eddb7676",
        "type": "function",
        "z": "07ac8830d610a027",
        "name": "Add outdoors",
        "func": "\n//msg.payload = msg.payload.concat([{room: \"Outdoors\"}, {room: \"water_boiler_room\"}])\nmsg.payload = msg.payload.concat([{room: \"Outdoors\"}])\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 360,
        "wires": [
            [
                "6851fc4e1d98013d"
            ]
        ]
    }
]