[
    {
        "id": "c79bf8c6e74ae101",
        "type": "subflow",
        "name": "Save in influx DBs",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 240,
                "wires": [
                    {
                        "id": "7548a14f7396a80f"
                    },
                    {
                        "id": "67cfaa3960459847"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7548a14f7396a80f",
        "type": "influxdb out",
        "z": "c79bf8c6e74ae101",
        "influxdb": "f64d2d329f647e71",
        "name": "InfluxDB RPI4 ",
        "measurement": "sensor_data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "swiftblade1982@gmail.com",
        "bucket": "Sensor_data",
        "x": 520,
        "y": 240,
        "wires": []
    },
    {
        "id": "67cfaa3960459847",
        "type": "influxdb out",
        "z": "c79bf8c6e74ae101",
        "influxdb": "1ac4dbb8c993bf9d",
        "name": "InfludDB Cloud",
        "measurement": "sensor_data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "swiftblade1982@gmail.com",
        "bucket": "Sensor_data",
        "x": 520,
        "y": 300,
        "wires": []
    },
    {
        "id": "1ac4dbb8c993bf9d",
        "type": "influxdb",
        "z": "c79bf8c6e74ae101",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB Cloud",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://eu-central-1-1.aws.cloud2.influxdata.com",
        "rejectUnauthorized": true
    },
    {
        "id": "f64d2d329f647e71",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB RPI4",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "c4e5c2ecfe2a7d7c",
        "type": "subflow",
        "name": "Get Room",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 200,
                "wires": [
                    {
                        "id": "2f90ac2e6758dcb9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 200,
                "wires": [
                    {
                        "id": "aa6109e4a5c0be32",
                        "port": 0
                    },
                    {
                        "id": "5e515066c83f5d87",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "edb7f5ee4bb17e78",
        "type": "mysql",
        "z": "c4e5c2ecfe2a7d7c",
        "mydb": "77baa11c77157752",
        "name": "",
        "x": 480,
        "y": 200,
        "wires": [
            [
                "b50f2f9f75d72f28"
            ]
        ]
    },
    {
        "id": "2f90ac2e6758dcb9",
        "type": "function",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Create query",
        "func": "\nmsg.sensor_id = msg.payload;\nmsg.topic=`select sensor_id, room from sensors where sensor_id = \"${msg.payload}\";`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            [
                "edb7f5ee4bb17e78"
            ]
        ]
    },
    {
        "id": "aa6109e4a5c0be32",
        "type": "function",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Get object from array",
        "func": "msg.payload = msg.payload[0];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b50f2f9f75d72f28",
        "type": "switch",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Empty check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "aa6109e4a5c0be32"
            ],
            [
                "5e515066c83f5d87"
            ]
        ]
    },
    {
        "id": "5e515066c83f5d87",
        "type": "function",
        "z": "c4e5c2ecfe2a7d7c",
        "name": "Create empty object",
        "func": "\nmsg.payload = {\n    sensor_id: msg.sensor_id,\n    room: \"Not specified\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6f295efb41de0f64",
        "type": "tab",
        "label": "NIG indoors sensors",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f3de19ae627756a8",
        "type": "group",
        "z": "6f295efb41de0f64",
        "g": "0133d31ab77b464c",
        "name": "Boiler sensor",
        "style": {
            "label": true
        },
        "nodes": [
            "8c3e16ee22c93023",
            "20b49a20a02f99d1",
            "613f7b6db7a9d2df",
            "50746b1e44afbbb9",
            "c62166d70d8a7cd2",
            "27a506d0afda7f4d",
            "0d50e7b83a890505",
            "ea1233fb894542e9",
            "de190bf3beea1c2a",
            "bfa7608c7ddf8882"
        ],
        "x": 54,
        "y": 579,
        "w": 1312,
        "h": 202
    },
    {
        "id": "46ae6eaea7b98a6c",
        "type": "group",
        "z": "6f295efb41de0f64",
        "g": "0133d31ab77b464c",
        "name": "Outdoors pocasidoma",
        "style": {
            "label": true
        },
        "nodes": [
            "84a1512053cd5f10",
            "e9bc1d8d864cd01a",
            "7f209b6dc426abd4",
            "81bb3521bf046ed9",
            "2c84747edf168680",
            "cb627522db08c527",
            "26ac583d4bd98514"
        ],
        "x": 54,
        "y": 1059,
        "w": 1132,
        "h": 182
    },
    {
        "id": "91fb6c2e6d03d44f",
        "type": "group",
        "z": "6f295efb41de0f64",
        "g": "0133d31ab77b464c",
        "name": "Outdoors sensor",
        "style": {
            "label": true
        },
        "nodes": [
            "0533be7df303af06",
            "259bf77f1b32d532",
            "0961c32405383a51",
            "1e4fd941529df255",
            "b1769eb6983f968e",
            "fb9a65ca01590cc7",
            "542022559f8d3c89",
            "6d06af34243d112a",
            "04fd40f832bf6316",
            "76ddb98570ad7c15"
        ],
        "x": 54,
        "y": 799,
        "w": 1352,
        "h": 222
    },
    {
        "id": "c2e3c67e8b32942e",
        "type": "group",
        "z": "6f295efb41de0f64",
        "g": "0133d31ab77b464c",
        "name": "Indoors sensors",
        "style": {
            "label": true
        },
        "nodes": [
            "07d6b639cb962ff6",
            "94204058074f2134",
            "717ec79f238636a8",
            "d6826ebc99181372",
            "0c900ab0327e2dee",
            "f40b9c614b45b718",
            "7bc472545809e322",
            "d5f993d33f4508a3",
            "d2d9175cc521443a",
            "d84deab32d24b48f",
            "c979f22f6171cbe6",
            "b61e240e36ac6d7e",
            "213a26f8f0e4420a",
            "50c8b9014b1bf57c",
            "d4ad7e1ca3716e2a",
            "8c679348d041b700",
            "a9c50bae42883c2e",
            "a5224bf7b48d60d3",
            "11b12c8f2978b551",
            "78936ed5134682cd",
            "16a06d934d6b60c5"
        ],
        "x": 54,
        "y": 39,
        "w": 1082,
        "h": 502
    },
    {
        "id": "0133d31ab77b464c",
        "type": "group",
        "z": "6f295efb41de0f64",
        "name": "Sensors API",
        "style": {
            "label": true
        },
        "nodes": [
            "f3de19ae627756a8",
            "46ae6eaea7b98a6c",
            "91fb6c2e6d03d44f",
            "c2e3c67e8b32942e"
        ],
        "x": 28,
        "y": 13,
        "w": 1404,
        "h": 1254
    },
    {
        "id": "07d6b639cb962ff6",
        "type": "http in",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Get values from sensor",
        "url": "/postSensor",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "d2d9175cc521443a",
                "c979f22f6171cbe6"
            ]
        ]
    },
    {
        "id": "94204058074f2134",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "HTTP Response on Error",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 360,
        "wires": []
    },
    {
        "id": "717ec79f238636a8",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Rooms query",
        "func": "msg.topic=\"SELECT * FROM sensors;\"\n\n//msg.topic=`DELETE FROM sensors where sensor_id=\"postman-1\";`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "0c900ab0327e2dee"
            ]
        ]
    },
    {
        "id": "d6826ebc99181372",
        "type": "inject",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "717ec79f238636a8"
            ]
        ]
    },
    {
        "id": "0c900ab0327e2dee",
        "type": "mysql",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "mydb": "77baa11c77157752",
        "name": "",
        "x": 560,
        "y": 120,
        "wires": [
            [
                "7bc472545809e322"
            ]
        ]
    },
    {
        "id": "f40b9c614b45b718",
        "type": "comment",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Debug select for all rooms in DB",
        "info": "",
        "x": 410,
        "y": 80,
        "wires": []
    },
    {
        "id": "7bc472545809e322",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Print rooms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 120,
        "wires": []
    },
    {
        "id": "d5f993d33f4508a3",
        "type": "comment",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Get data from sensor and insert into InfluxDB",
        "info": "",
        "x": 530,
        "y": 380,
        "wires": []
    },
    {
        "id": "d2d9175cc521443a",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Data from sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 240,
        "wires": []
    },
    {
        "id": "d84deab32d24b48f",
        "type": "change",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Save sensor data  to flow",
        "rules": [
            {
                "t": "set",
                "p": "sensor_data",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.sensor_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 300,
        "wires": [
            [
                "78936ed5134682cd"
            ]
        ]
    },
    {
        "id": "c979f22f6171cbe6",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "JSON test",
        "func": "\n// Post Request does not containe JSON data, flow stops\nif(typeof(msg.payload) != \"object\" ){\n    msg.statusCode = 415;\n    msg.payload = \"Data are not in JSON format\";\n}\n// Empty JSON, flow stops\nelse if(JSON.stringify(msg.payload) == '{}'){\n    msg.statusCode = 422;\n    msg.payload = \"JSON is empty\";\n}\n\n// JSON does not contain all data, flow stops\nelse if(!(\"sensor_id\" in msg.payload && \"board_type\" in msg.payload && \"sensor_type\" in msg.payload && \"temperature\" in msg.payload && \"pressure\" in msg.payload && \"humidity\" in msg.payload)){\n    msg.statusCode = 422;\n    msg.payload = \"JSON doesn't contain neccesary values.\";\n}\n\n// Everything is fine and we can proceed with rest of the code flow\nelse{\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "b61e240e36ac6d7e",
                "213a26f8f0e4420a"
            ]
        ]
    },
    {
        "id": "b61e240e36ac6d7e",
        "type": "switch",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "HTTP response switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 300,
        "wires": [
            [
                "d84deab32d24b48f",
                "50c8b9014b1bf57c"
            ],
            [
                "94204058074f2134"
            ]
        ]
    },
    {
        "id": "213a26f8f0e4420a",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Response code and msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 240,
        "wires": []
    },
    {
        "id": "50c8b9014b1bf57c",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "HTTP Response OK",
        "statusCode": "",
        "headers": {},
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "d4ad7e1ca3716e2a",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Parse to InfluxDB data format",
        "func": "sensor_data = flow.get(\"sensor_data\");\nroom = msg.payload.room;\n\nif(room != \"Not specified\"){\n    msg.payload = [\n    //Fields - (Measured values from sensor)\n    {\n        temperature: sensor_data.temperature,\n        pressure: sensor_data.pressure,\n        humidity: sensor_data.humidity\n    },\n    \n    //Tags - (Information to distinct one sensor from another)\n    {\n        sensor_id: sensor_data.sensor_id,\n        board_type: sensor_data.board_type,\n        sensor_type: sensor_data.sensor_type,\n        room: room\n    }];\n\n    return msg;\n}\n// If room is not set saves values from sensor without room\nelse {\n     msg.payload = [\n    //Fields - (Measured values from sensor)\n    {\n        temperature: sensor_data.temperature,\n        pressure: sensor_data.pressure,\n        humidity: sensor_data.humidity\n    },\n    \n    //Tags - (Information to distinct one sensor from another)\n    {\n        sensor_id: sensor_data.sensor_id,\n        board_type: sensor_data.board_type,\n        sensor_type: sensor_data.sensor_type\n    }];\n\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 500,
        "wires": [
            [
                "8c679348d041b700",
                "16a06d934d6b60c5"
            ]
        ]
    },
    {
        "id": "8c679348d041b700",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Parsed Influxdb",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 440,
        "wires": []
    },
    {
        "id": "a9c50bae42883c2e",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "Room from DB",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 440,
        "wires": []
    },
    {
        "id": "a5224bf7b48d60d3",
        "type": "subflow:c4e5c2ecfe2a7d7c",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "x": 400,
        "y": 500,
        "wires": [
            [
                "d4ad7e1ca3716e2a",
                "a9c50bae42883c2e"
            ]
        ]
    },
    {
        "id": "11b12c8f2978b551",
        "type": "link in",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "links": [
            "78936ed5134682cd"
        ],
        "x": 265,
        "y": 500,
        "wires": [
            [
                "a5224bf7b48d60d3"
            ]
        ]
    },
    {
        "id": "78936ed5134682cd",
        "type": "link out",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "mode": "link",
        "links": [
            "11b12c8f2978b551"
        ],
        "x": 1095,
        "y": 300,
        "wires": []
    },
    {
        "id": "8c3e16ee22c93023",
        "type": "http in",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Get values from boiler sensor",
        "url": "/postBoiler",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 680,
        "wires": [
            [
                "613f7b6db7a9d2df",
                "50746b1e44afbbb9"
            ]
        ]
    },
    {
        "id": "20b49a20a02f99d1",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "HTTP Response on Error",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 740,
        "wires": []
    },
    {
        "id": "613f7b6db7a9d2df",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Data from sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 620,
        "wires": []
    },
    {
        "id": "50746b1e44afbbb9",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "JSON test",
        "func": "\n// Post Request does not containe JSON data, flow stops\nif(typeof(msg.payload) != \"object\" ){\n    msg.statusCode = 415;\n    msg.payload = \"Data are not in JSON format\";\n}\n// Empty JSON, flow stops\nelse if(JSON.stringify(msg.payload) == '{}'){\n    msg.statusCode = 422;\n    msg.payload = \"JSON is empty\";\n}\n\n// JSON does not contain all data, flow stops\nelse if(!(\"sensor_id\" in msg.payload && \"board_type\" in msg.payload && \"sensor_type\" in msg.payload && \"tmp_in\" in msg.payload && \"tmp_out\" in msg.payload && \"dhw_tmp\" in msg.payload && \"dhw_coil_temp\" in msg.payload )){\n    msg.statusCode = 422;\n    msg.payload = \"JSON doesn't contain neccesary values.\";\n}\n\n// Everything is fine and we can proceed with rest of the code flow\nelse{\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 680,
        "wires": [
            [
                "c62166d70d8a7cd2",
                "27a506d0afda7f4d"
            ]
        ]
    },
    {
        "id": "c62166d70d8a7cd2",
        "type": "switch",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "HTTP response switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 680,
        "wires": [
            [
                "0d50e7b83a890505",
                "ea1233fb894542e9"
            ],
            [
                "20b49a20a02f99d1"
            ]
        ]
    },
    {
        "id": "27a506d0afda7f4d",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Print response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 620,
        "wires": []
    },
    {
        "id": "0d50e7b83a890505",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "HTTP Response OK",
        "statusCode": "",
        "headers": {},
        "x": 940,
        "y": 640,
        "wires": []
    },
    {
        "id": "ea1233fb894542e9",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Parse to InfluxDB data format",
        "func": "boiler_data = msg.payload;\n\n\nmsg.payload = [\n//Fields - (Measured values from sensor)\n{\n    tmp_in: boiler_data.tmp_in,\n    tmp_out: boiler_data.tmp_out,\n    dhw_tmp: boiler_data.dhw_tmp,\n    dhw_coil_temp: boiler_data.dhw_coil_temp\n},\n\n//Tags - (Information to distinct one sensor from another)\n{\n    sensor_id: boiler_data.sensor_id,\n    board_type: boiler_data.board_type,\n    sensor_type: boiler_data.sensor_type,\n    room: \"water_boiler_room\"\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 680,
        "wires": [
            [
                "de190bf3beea1c2a",
                "bfa7608c7ddf8882"
            ]
        ]
    },
    {
        "id": "de190bf3beea1c2a",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "Boiler InfluxDB data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 620,
        "wires": []
    },
    {
        "id": "84a1512053cd5f10",
        "type": "http request",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "HTTP Req to pocasidoma",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://www.pocasidoma.cz/?ajax=getDetailMarker&idstation=360",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1100,
        "wires": [
            [
                "7f209b6dc426abd4"
            ]
        ]
    },
    {
        "id": "e9bc1d8d864cd01a",
        "type": "inject",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1100,
        "wires": [
            [
                "84a1512053cd5f10"
            ]
        ]
    },
    {
        "id": "7f209b6dc426abd4",
        "type": "json",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 1100,
        "wires": [
            [
                "81bb3521bf046ed9",
                "2c84747edf168680"
            ]
        ]
    },
    {
        "id": "81bb3521bf046ed9",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Parsed JSON",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1100,
        "wires": []
    },
    {
        "id": "2c84747edf168680",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Parse values from JSON",
        "func": "web_scrape_data = msg.payload.Data;\nvalue_names = [\"Vítr směr\", \"Tlak relat.\", \"Vlhkost ven.\", \"Teplota ven.\", \"Intenzita srážek\", \"Déšť\"];\nextracted_values = {};\n\nweb_scrape_data.allMeasures.forEach((value) => {\n    if (value_names.includes(value.Name)){\n        extracted_values[value.Name] = value.Value;\n    }\n    \n})\n\nmsg.payload = [\n//Fields - (Measured values from sensor)\n{\n    temperature: extracted_values[\"Teplota ven.\"],\n    pressure: extracted_values[\"Tlak relat.\"],\n    humidity: extracted_values[\"Vlhkost ven.\"]\n},\n\n//Tags - (Information to distinct one sensor from another)\n{\n    sensor_id: `pocasidoma-${web_scrape_data.id}`,\n    sensor_type: \"Davis Vantage PRO2\",\n    room: \"Outdoors\"\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1200,
        "wires": [
            [
                "cb627522db08c527",
                "26ac583d4bd98514"
            ]
        ]
    },
    {
        "id": "cb627522db08c527",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "Print pocasidoma InfluxDB data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1160,
        "wires": []
    },
    {
        "id": "0533be7df303af06",
        "type": "http in",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "",
        "url": "/luftdatenSensor",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 900,
        "wires": [
            [
                "259bf77f1b32d532",
                "1e4fd941529df255"
            ]
        ]
    },
    {
        "id": "259bf77f1b32d532",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Data from sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 840,
        "wires": []
    },
    {
        "id": "0961c32405383a51",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "OK Response",
        "statusCode": "",
        "headers": {},
        "x": 900,
        "y": 840,
        "wires": []
    },
    {
        "id": "1e4fd941529df255",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "JSON test",
        "func": "\n// Post Request does not containe JSON data, flow stops\nif(typeof(msg.payload) != \"object\" ){\n    msg.statusCode = 415;\n    msg.payload = \"Data are not in JSON format\";\n}\n// Empty JSON, flow stops\nelse if(JSON.stringify(msg.payload) == '{}'){\n    msg.statusCode = 422;\n    msg.payload = \"JSON is empty\";\n}\n\n// Everything is fine and we can proceed with rest of the code flow\nelse{\n    msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 900,
        "wires": [
            [
                "b1769eb6983f968e",
                "fb9a65ca01590cc7"
            ]
        ]
    },
    {
        "id": "b1769eb6983f968e",
        "type": "switch",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "HTTP response switch",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 900,
        "wires": [
            [
                "0961c32405383a51",
                "542022559f8d3c89"
            ],
            [
                "6d06af34243d112a"
            ]
        ]
    },
    {
        "id": "fb9a65ca01590cc7",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Print response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 980,
        "wires": []
    },
    {
        "id": "542022559f8d3c89",
        "type": "function",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Parse to InfluxDB data format",
        "func": "sensor_data = msg.payload;\nvalue_names = [\"BME280_temperature\",\"BME280_pressure\", \"BME280_humidity\"];\nextracted_values ={};\n\nsensor_data.sensordatavalues.forEach((value) => {\n    if (value_names.includes(value.value_type)){\n        extracted_values[value.value_type] = value.value;\n    }\n    \n})\n\nmsg.payload = [\n//Fields - (Measured values from sensor)\n{\n   temperature: parseInt(extracted_values[\"BME280_temperature\"]),\n   pressure: parseInt(extracted_values[\"BME280_temperature\"]),\n   humidity: parseInt(extracted_values[\"BME280_humidity\"])\n},\n\n//Tags - (Information to distinct one sensor from another)\n{\n    sensor_id: `luftdaten-${sensor_data.esp8266id}`,\n    board_type: \"esp8266\",\n    sensor_type: \"bme280\",\n    room: \"Outdoors\"\n}];\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 900,
        "wires": [
            [
                "04fd40f832bf6316",
                "76ddb98570ad7c15"
            ]
        ]
    },
    {
        "id": "6d06af34243d112a",
        "type": "http response",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "HTTP Response on Error",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 960,
        "wires": []
    },
    {
        "id": "04fd40f832bf6316",
        "type": "debug",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "Print luftdaten InfluxDB data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 840,
        "wires": []
    },
    {
        "id": "16a06d934d6b60c5",
        "type": "subflow:c79bf8c6e74ae101",
        "z": "6f295efb41de0f64",
        "g": "c2e3c67e8b32942e",
        "name": "",
        "x": 950,
        "y": 500,
        "wires": []
    },
    {
        "id": "bfa7608c7ddf8882",
        "type": "subflow:c79bf8c6e74ae101",
        "z": "6f295efb41de0f64",
        "g": "f3de19ae627756a8",
        "name": "",
        "x": 1230,
        "y": 680,
        "wires": []
    },
    {
        "id": "76ddb98570ad7c15",
        "type": "subflow:c79bf8c6e74ae101",
        "z": "6f295efb41de0f64",
        "g": "91fb6c2e6d03d44f",
        "name": "",
        "x": 1230,
        "y": 900,
        "wires": []
    },
    {
        "id": "26ac583d4bd98514",
        "type": "subflow:c79bf8c6e74ae101",
        "z": "6f295efb41de0f64",
        "g": "46ae6eaea7b98a6c",
        "name": "",
        "x": 970,
        "y": 1200,
        "wires": []
    },
    {
        "id": "77baa11c77157752",
        "type": "MySQLdatabase",
        "name": "RPI4_MariaDB",
        "host": "mariadb",
        "port": "3306",
        "db": "sensor",
        "tz": "",
        "charset": "UTF8"
    }
]