# This is a simple example to read data from a BME680 sensor and send it to a Node-RED server
# using the HTTP Request component. The sensor data is sent every 60 seconds.

# This part is mostly autogenerated by ESPHome when creating new devices
esphome:
  name: <generated by EspHome>
  friendly_name: <generated by EspHome>
  area: <needs to be added by user manually>

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "<generated by EspHome>"

ota:
  - platform: esphome
    password: "<generated by EspHome>"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp-Test Fallback Hotspot"
    password: "<generated by EspHome>"

captive_portal:

# End of autogenerated part
# Config below needs to be added to the autogenerated part to enable reading data from the BME680 sensor and sending it to Node-RED

# Enable I2C
i2c:
  sda: 4
  scl: 5

bme680_bsec:

sensor:
  - platform: bme680_bsec
    temperature:
      id: "temperature"
      name: "BME680 Temperature"
    pressure:
      id: "pressure"
      name: "BME680 Pressure"
    humidity:
      id: "humidity"
      name: "BME680 Humidity"
    gas_resistance:
      id: "gas_resistance"
      name: "BME680 Gas Resistance"
    iaq:
      id: "iaq"
      name: "BME680 IAQ"
    iaq_accuracy:
      # IAQ accuracy as a numeric value of 0, 1, 2, 3
      id: "iaq_accuracy"
      name: "BME680 IAQ Accuracy"
    co2_equivalent:
      id: "co2_equivalent"
      name: "BME680 CO2 Equivalent"
    breath_voc_equivalent:
      # Breath Volatile Organic Compounds (bVOC)
      id: "bvoc_equivalent"
      name: "BME680 Breath VOC Equivalent"

text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      name: "BME680 IAQ Accuracy"

  - platform: template
    name: "BME680 IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }

http_request:
  timeout: 10s
  verify_ssl: false

# Http request interval
interval:
  - interval: 60s
    startup_delay: 60s
    then:
      - http_request.post:
          url: "http://rpi-test.home.lan:1880/postSensor"
          headers:
            Content-Type: "application/json"
          json:
            sensor_id: !lambda 'return esphome::App.get_name();'
            board_type: "esp8266"
            sensor_type: "BME680"
            room: !lambda 'return esphome::App.get_area();'
            temperature: !lambda 'return std::to_string(id(temperature).state);'
            pressure: !lambda 'return std::to_string(id(pressure).state);'
            humidity: !lambda 'return std::to_string(id(humidity).state);'
            gas_resistance: !lambda 'return std::to_string(id(gas_resistance).state);'
            iaq: !lambda 'return std::to_string(id(iaq).state);'
            iaq_accuracy: !lambda 'return std::to_string(id(iaq_accuracy).state);'
            co2_equivalent: !lambda 'return std::to_string(id(co2_equivalent).state);'
            bvoc_equivalent: !lambda 'return std::to_string(id(bvoc_equivalent).state);'

