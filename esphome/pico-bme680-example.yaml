# This is a simple example to read data from a BME680 sensor and send it to a Node-RED server
# using the HTTP Request component. The sensor data is sent every 60 seconds.

# This part is mostly autogenerated by ESPHome when creating new devices
esphome:
  name: <generated by EspHome>
  friendly_name: <generated by EspHome>
  area: <needs to be added by user manually>

rp2040:
  board: rpipicow
  framework:
    # Required until https://github.com/platformio/platform-raspberrypi/pull/36 is merged
    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "<generated by EspHome>"

ota:
  - platform: esphome
    password: "<generated by EspHome>"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "<generated by EspHome> Fallback Hotspot"
    password: "<generated by EspHome>"

# End of autogenerated part
# Config below needs to be added to the autogenerated part to enable reading data from the BME680 sensor and sending it to Node-RED

# Enable I2C
# Warning: EspHome only supports I2C0 pins for the RPI Pico board at the moment, I2C1 pins are not supported (see picow-pinout.png)
i2c:
  sda: 20
  scl: 21

sensor:
  - platform: bme680
    temperature:
      id: "temperature"
      name: "BME680 Temperature"
      oversampling: 16x
    pressure:
      id: "pressure"
      name: "BME680 Pressure"
    humidity:
      id: "humidity"
      name: "BME680 Humidity"
    gas_resistance:
      id: "gas_resistance"
      name: "BME680 Gas Resistance"

  - platform: template
    name: "BME680 Indoor Air Quality"
    id: iaq
    icon: "mdi:gauge"
    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(gas_resistance).state) + 0.04 *  id(humidity).state;
    state_class: "measurement"

text_sensor:
  - platform: template
    name: "BME680 IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }

http_request:
  timeout: 10s
  verify_ssl: false

# Http request interval
interval:
  - interval: 60s
    startup_delay: 20s
    then:
      - http_request.post:
          url: "http://rpi-server.home.lan:1880/postSensor"
          headers:
            Content-Type: "application/json"
          json:
            sensor_id: !lambda 'return esphome::App.get_name();'
            board_type: "RP2040"
            sensor_type: "BME680"
            room: !lambda 'return esphome::App.get_area();'
            temperature: !lambda 'return std::to_string(id(temperature).state);'
            pressure: !lambda 'return std::to_string(id(pressure).state);'
            humidity: !lambda 'return std::to_string(id(humidity).state);'
            gas_resistance: !lambda 'return std::to_string(id(gas_resistance).state);'
            iaq: !lambda 'return std::to_string(id(iaq).state);'
              
    
# output:
#   - platform: gpio
#     pin: 32
#     id: led

# interval:
#   - interval: 1000ms
#     then:
#       - output.turn_on: led
#       - delay: 500ms
#       - output.turn_off: led